#Область СлужебныеПроцедурыИФункции
// Форимрует новый документ приобретения
Функция СформироватьДокументПриобретения(ДанныеЗаполнения, Товары)

	документ = документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
	Документ.Дата = ТекущаяДатаСеанса();
	документ.Заполнить(Неопределено);
	Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ЗаполнитьЗначенияСвойств(документ, ДанныеЗаполнения);
	
	Документ.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Документ.Партнер);
	Документ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Документ.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	

	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Документ);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Документ.НалогообложениеНДС, ПараметрыЗаполнения, Неопределено);
	
	ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(Документ);
	
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Документ.ЗакупкаПодДеятельность, ПараметрыЗаполнения, неопределено);
	
	Документ.ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();;

	
	для Каждого строкаТовар из товары Цикл 
		СтрокаДокумента = документ.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, строкаТовар);
		//@skip-check unknown-method-property
		СтрокаДокумента.СтавкаНДС = СтрокаДокумента.Номенклатура.СтавкаНДС;
		СтрокаДокумента.Склад = документ.Склад;
		СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество;
		СтрокаДокумента.Сумма = строкаТовар.Сумма ;
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(документ);
	
	СтруктураДействий = новый Структура;
	ПараметрыУказанияСерий = документы.ПриобретениеТоваровУслуг.ПараметрыУказанияСерий(Документ); 
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Документ));
    СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках",  
    	ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(
    		Документ, Документ.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
    	)
    );
    		
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
		Новый Структура("Склад, ПараметрыУказанияСерий", Документ.Склад, ПараметрыУказанияСерий)
	);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);    
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа",
	 Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		документ.ПоступлениеПоЗаказам, документ.ТребуетсяЗалогЗаТару)
	);

	////СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьЦену");


		
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Документ.Товары, СтруктураДействий, Неопределено);

	
	Документ.Автор = ПараметрыСеанса.ТекущийПользователь;
	
	Возврат документ;
КонецФункции // СформироватьДокументПриобретения()

Функция СписокДоступныхОрганизацийКТ(КонтрольнаяТочка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПередачиВПереработку.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.НастройкиПередачиВПереработку КАК НастройкиПередачиВПереработку
		|ГДЕ
		|	НастройкиПередачиВПереработку.ФормироватьДокументыПередачи
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрольнаяТочка.Организация
		|ИЗ
		|	Справочник.КонтрольнаяТочка КАК КонтрольнаяТочка
		|ГДЕ
		|	КонтрольнаяТочка.Ссылка = &КонтрольнаяТочка";

	запрос.УстановитьПараметр("КонтрольнаяТочка", КонтрольнаяТочка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");


КонецФункции // СписокДоступныхОрганизацийКТ()

// Структура для заполнения документа
//@skip-check doc-comment-export-function-return-section
Функция СтруктураДанныхПриобретение()  Экспорт 

	//@skip-check structure-consructor-too-many-keys

	//@skip-check structure-consructor-too-many-keys
	Возврат Новый Структура("Партнер, Организация, Договор, Склад, НомерВходящегоДокумента, ДатаВходящегоДокумента, ЦенаВключаетНДС, РегистрироватьЦеныПоставщика"
	);	

КонецФункции // СтруктураДанныхПриобретение()

//@skip-check function-should-return-value
//@skip-check doc-comment-parameter-section
//@skip-check doc-comment-export-function-return-section
Функция ПровестиПакетДокументовПоступления(Параметры, АдресРезультата)  Экспорт 

	
	УстановитьПривилегированныйРежим(истина);
	 
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	    ДокументПриобретения = СформироватьДокументПриобретения(Параметры.ДанныеЗаполнения, Параметры.Товары);	
		ДокументПриобретения.ДополнительныеСвойства.Вставить("СинхронизироватьПриЗаписи");	
		ДокументПриобретения.Записать(РежимЗаписиДокумента.Проведение);
		
		//ПередачаВПереработку.СформироватьПриходныйОрдерНаТовары( ДокументПриобретения, Параметры.Товары, новый Массив);
		
		ПоместитьВоВременноеХранилище(ДокументПриобретения.Ссылка, АдресРезультата);	
		если ТранзакцияАктивна() Тогда 
			ЗафиксироватьТранзакцию();
		иначе 
			ВызватьИсключение "Транзакция не активка!";
		КонецЕсли;
		
	Исключение
		если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("ФормированиеПриобретений", УровеньЖурналаРегистрации.Ошибка, ,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Сообщение = Новый СообщениеПользователю;
		//@skip-check object-deprecated
		Сообщение.Текст = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщение.Сообщить();
		//@skip-check object-deprecated
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	

	

КонецФункции // ПровестиПакетДокументовПоступления()

#КонецОбласти