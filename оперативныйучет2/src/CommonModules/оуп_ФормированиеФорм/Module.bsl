#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьТЧ(ТаблицаИЗ, Объект, ИмяТЧОбъекта, именаРеквизитов) Экспорт 

	для Каждого ст из ТаблицаИЗ Цикл 
		строка = Объект[ИмяТЧОбъекта].Добавить();
		ЗаполнитьЗначенияСвойств(строка, ст, именаРеквизитов);
	КонецЦикла;


КонецПроцедуры


Функция Добавитьгруппу (Форма, имя= "ГруппаСтраниц" , владелец = Неопределено) Экспорт 
	
	группа = Форма.Элементы.Добавить(имя, тип("ГруппаФормы"), ?(владелец = Неопределено, Форма, владелец) );
	группа.Вид = ВидГруппыФормы.Страницы;
	группа.РастягиватьПоВертикали = Истина;
	группа.РастягиватьПоГоризонтали = Истина;
	
	Возврат группа;

КонецФункции


Функция ДобавитьгруппуОбычную (Форма, имя , владелец ) Экспорт 
	
	группа = Форма.Элементы.Добавить(имя, тип("ГруппаФормы"),владелец);
	группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	группа.РастягиватьПоВертикали = Истина;
	группа.РастягиватьПоГоризонтали = Истина;
	группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Возврат группа;

КонецФункции

Функция ДобавитьСтраницу (Форма, группа, Имя, Заголовок="") Экспорт 
	страница =  Форма.Элементы.Добавить(Имя, Тип("ГруппаФормы"), группа);
	страница.вид = ВидГруппыФормы.Страница;
	страница.Заголовок = Заголовок;
	страница.ШрифтЗаголовка =Новый Шрифт(, 18, Истина, , , ) ;    
	Страница.Картинка = БиблиотекаКартинок.оуп_СтраницаФормы;
	Возврат страница;
КонецФункции

Функция  ДобавитьКнопкуКоманды (Имя, страница, форма)  Экспорт 
	мШрифт = Новый Шрифт(, 12, Истина, , , ) ;
	НовыйЭлемент = форма.Элементы.Добавить(Имя,
		Тип("КнопкаФормы"),
	страница);
	          		
	НовыйЭлемент.ИмяКоманды = Имя;	
	НовыйЭлемент.Шрифт = мШрифт;   
	НовыйЭлемент.АвтоМаксимальнаяШирина = истина;
	НовыйЭлемент.АвтоМаксимальнаяВысота = Ложь;
	НовыйЭлемент.ВысотаЗаголовка = 2;
	НовыйЭлемент.высота = 3;
	НовыйЭлемент.ширина = 20;
	НовыйЭлемент.РастягиватьПоВертикали = Истина;
	//НовыйЭлемент.РастягиватьПоГоризонтали = Истина;

	Возврат НовыйЭлемент;
КонецФункции

Процедура ДобавитьКомандуВСписок(форма, ИмяКоманды, Спецификация)  Экспорт 
	элКоманда = форма.СписокКоманд.Добавить();
	элКоманда.ИмяКоманды 	= ИмяКоманды;
	элКоманда.Спецификация 	= Спецификация;
КонецПроцедуры


Функция ДобавитьКоманду (форма, Имя, Действие, Заголовок) Экспорт 
	НоваяКоманда = форма.Команды.Добавить(Имя);
	НоваяКоманда.Действие = Действие;//Имя процедуры
	НоваяКоманда.Заголовок = Заголовок;
	Возврат НоваяКоманда;
КонецФункции


Процедура УстановитьОтборДинСписка(Список, имяРеквизита, ОбъектЗначения) Экспорт 
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(имяРеквизита);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОбъектЗначения[имяРеквизита];
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры


//@skip-check method-too-many-params
//@skip-check doc-comment-parameter-section
Процедура ДобавитьСтраницуТаблицаЗначений (массивЭлементов,
		знач массивРеквизитов_добавленные, 
		массивКоманд,
		группа,
		ТЗ ,// Таблица для создания колонок
		тзКоманд, // Таблица с данными страниц
		Форма,
		сткДействий ,
		ФормитированиеКолонок = Неопределено
		)  Экспорт 

	тзстраниц = тзКоманд.Скопировать();
	тзстраниц.свернуть("Наименование");
	
	счетчик = 1;
	мШрифт = Новый Шрифт(, 14, Истина, , , ) ;
	
	для Каждого СтраницаКоманд из тзстраниц Цикл 
		страница =  Форма.Элементы.Добавить("Страница_" + счетчик, Тип("ГруппаФормы"), группа);
		страница.вид = ВидГруппыФормы.Страница;
		страница.Заголовок =  СтраницаКоманд.Наименование;
		страница.ШрифтЗаголовка = мШрифт;
		массивЭлементов.Добавить(страница.Имя);
		
		отборСтраницы = новый Структура;
		отборСтраницы.Вставить("Наименование", СтраницаКоманд.Наименование);
		табКомандПоСтранице = тзКоманд.Скопировать(отборСтраницы);
//		сччетчик = 0;
		
		ГруппаЭлемента = Форма.Элементы.Добавить("Группа_"+ счетчик, тип("ГруппаФормы"),страница);
		ГруппаЭлемента.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемента.РастягиватьПоВертикали = Истина;
		ГруппаЭлемента.РастягиватьПоГоризонтали = Истина;
		ГруппаЭлемента.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		
		
		
		
		МассивТипаВыбора = Новый Массив;
		МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				//мас1= новый Массив;
		//мас1.Добавить("Список" + счетчик);
		//ИзменитьРеквизиты(,мас1);
		если не ПроверитьРеквизит(форма, "Список" + счетчик) Тогда 
			МассивРеквизитов = Новый Массив;
			
			резвизит_добавленный = Новый РеквизитФормы("Список" + счетчик, ОписаниеТипаВыбора, , "ТЗН");
			МассивРеквизитов.Добавить(резвизит_добавленный);
			форма.ИзменитьРеквизиты(МассивРеквизитов);
		КонецЕсли;
		
						
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			если не ПроверитьРеквизит(форма, Колонка.Имя) Тогда 
				МассивРеквизитов = Новый Массив;
				Попытка
					резвизит_добавленный = Новый РеквизитФормы(Колонка.Имя , 
					Колонка.ТипЗначения,"Список" + счетчик);
			
					МассивРеквизитов.Добавить(резвизит_добавленный);
					массивРеквизитов_добавленные.Добавить(резвизит_добавленный);

					форма.ИзменитьРеквизиты(МассивРеквизитов);
				Исключение
					сообщение = новый СообщениеПользователю();
					сообщение.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					сообщение.Сообщить();
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		 
		
		ТаблицаПолейВыбора = форма.Элементы.Добавить("таб_"+счетчик, Тип("ТаблицаФормы"), страница);
				
		ТаблицаПолейВыбора.ПутьКДанным = "Список" + счетчик;
		ТаблицаПолейВыбора.Отображение = ОтображениеТаблицы.Список;
		ТаблицаПолейВыбора.ТолькоПросмотр = Истина;
		ТаблицаПолейВыбора.КоманднаяПанель.Видимость = Ложь;
		
		этоПерваяКолонка = Истина;
		
		Для Каждого Колонка Из ТЗ.Колонки Цикл
			
			НовыйЭлемент = форма.Элементы.Добавить(Колонка.Имя+счетчик, Тип("ПолеФормы"), ТаблицаПолейВыбора);       
						
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "Список" + счетчик+"." + Колонка.Имя;
					
			УстановитьФорматированиеКолонки (Колонка, НовыйЭлемент, ФормитированиеКолонок);
			// фокун на первой колонке
			если этоПерваяКолонка Тогда 
				этоПерваяКолонка = Ложь;
				форма.Элементы["таб_"+счетчик].текущийЭлемент = форма.Элементы[Колонка.Имя+счетчик] ;
			КонецЕсли;

		КонецЦикла;
		
		для Каждого ключиЗН из сткДействий Цикл 
			ТаблицаПолейВыбора.УстановитьДействие(ключиЗН.Ключ,ключиЗН.Значение);
		КонецЦикла;
		
		
		форма.ЗначениеВРеквизитФормы(табКомандПоСтранице, "Список" + строка(счетчик));
		
		счетчик = счетчик +1;	
	КонецЦикла;
	
КонецПроцедуры

Функция соотвФормитирования (Строка)  Экспорт 
	массив = СтрРазделить(строка, ",");
	
	Соответствие = новый Соответствие;
	для Каждого элемент из массив Цикл 
		Соответствие.Вставить(элемент, ПараметрыКолонки());
	КонецЦикла;
	Возврат Соответствие;

КонецФункции // Добавить()

Функция ПараметрыКолонки(Ширина = 10, РастягиватьПоГоризонтали = Истина) Экспорт 
	структура = новый Структура;
	структура.Вставить("Ширина", Ширина);
	структура.Вставить("Шрифт", мШрифт());
	структура.Вставить("ГоризонтальноеПоложение",  ГоризонтальноеПоложениеЭлемента.Право);
	//структура.Вставить("РастягиватьПоГоризонтали", РастягиватьПоГоризонтали);
	//структура.Вставить("АвтоМаксимальнаяШирина",   Истина);
	//структура.Вставить("МаксимальнаяШирина",	   Ширина);
	
	Возврат структура;
КонецФункции


Процедура ДобавитьКолонкиСкладовТаблицы(
		форма, // ссылка на форму 
		ТекущийСклад, // Ссылка на текущий склад
		ТочкиПолучатели, // табличная часть контрольной точки
		ИмяТабличнойЧастиРеквизита, // строка вида "Объект.Табличная честь"
		СоответствиеСкладовФормы, // Таблица формы с соответствие складов и иен колонок
		ЭлементТабличнаяЧасть, // Элемент формы 
		ДобавлятьКолонкуЭтотСклад = Истина // Добавить колонку с текущим складом
		) Экспорт 
	массив = Новый Массив;
	Счетчик = 0;
	//Доступные для перемещения склады
	для Каждого Строка из ТочкиПолучатели Цикл 
		ДобавитьРекцизитыДляСклада(массив, Счетчик, Строка.Склад, ИмяТабличнойЧастиРеквизита, СоответствиеСкладовФормы);
	КонецЦикла;
	// Добавим текущий склад в колонки
	если ДобавлятьКолонкуЭтотСклад Тогда 
		ДобавитьРекцизитыДляСклада(массив, Счетчик, ТекущийСклад, ИмяТабличнойЧастиРеквизита, СоответствиеСкладовФормы, Истина);
	КонецЕсли;
	
	форма.ИзменитьРеквизиты(массив);
	
	
	для Каждого Строка из СоответствиеСкладовФормы Цикл 
		
		элемент = форма.элементы.Добавить(Строка.Имя, тип("ПолеФормы"), ЭлементТабличнаяЧасть);
		элемент.Вид = ВидПоляФормы.ПолеВвода;                                         
		Элемент.ПутьКДанным = ИмяТабличнойЧастиРеквизита +"."+Строка.Имя;
		Элемент.Шрифт = Новый Шрифт("Arial",, 12, Истина, , , );
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;		
		Элемент.Ширина = 7;
	КонецЦикла;


КонецПроцедуры // ДобавитьКолонкиСкладов()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция мШрифт ()
	мШрифт = Новый Шрифт(, 14, Истина, , , ) ;	
	Возврат мШрифт;
КонецФункции


Процедура УстановитьФорматированиеКолонки (Колонка, НовыйЭлемент, ФормитированиеКолонок)
	если ТипЗнч(ФормитированиеКолонок) <> тип("Соответствие") Тогда 
		Возврат;
	КонецЕсли;
	форматирование = ФормитированиеКолонок.получить(Колонка.Имя);
	если форматирование = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	для Каждого ключИЗнч из форматирование Цикл 
		НовыйЭлемент[ключИЗнч.ключ] = ключИЗнч.Значение;
	КонецЦикла;
	
КонецПроцедуры

Функция  ПроверитьРеквизит(форма, ИмяРеквизита)
    
    Попытка
        //@skip-check module-unused-local-variable
        тест = форма[ИмяРеквизита];
        ЕстьРеквизит = Истина;
    Исключение
        ЕстьРеквизит = Ложь;
    КонецПопытки;

    Возврат ЕстьРеквизит;

КонецФункции 

Процедура ДобавитьРекцизитыДляСклада(массив, Счетчик, Склад, ИмяТаблицы, СоответствиеСкладовФормы, ЭтотСклад=Ложь)

	СтрокаСоответствие = СоответствиеСкладовФормы.Добавить();
	СтрокаСоответствие.Имя = "Склад_" + Счетчик;
	СтрокаСоответствие.склад = Склад;
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный);
	ОписаниеЧисла = Новый ОписаниеТипов("Число", КвалификаторыЧисла);
	
	реквизит = новый РеквизитФормы(
		СтрокаСоответствие.Имя, 
		ОписаниеЧисла, 
		ИмяТаблицы,
		?(ЭтотСклад, "Этот склад", СтрокаСоответствие.склад)
	);
	
	массив.Добавить(реквизит);
	Счетчик = Счетчик + 1;

КонецПроцедуры

Функция ИмяКолонкиСклада(Знач Склад = Неопределено, Форма, ДляТекущегоСклада=Ложь)  Экспорт 
	Отбор = новый Структура("Склад", 	
		?(
			ДляТекущегоСклада,
			Форма.КонтрольнаяТочка.Склад,
			Склад)
		);
	СтрокиСоответствия = Форма.СоответствиеСкладов.НайтиСтроки(Отбор);
	если СтрокиСоответствия.количество() = 0 Тогда 
		ВызватьИсключение "Ошибка поиска колонки склада !";
	КонецЕсли;
	ТекИмяКолонки = СтрокиСоответствия[0].Имя;
	Возврат ТекИмяКолонки;
	
КонецФункции // ИмяКолонкиСклада()

#КонецОбласти

