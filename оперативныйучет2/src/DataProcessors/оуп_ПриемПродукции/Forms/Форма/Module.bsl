#Область ОбработчикиСобытийФормы    

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	КонтрольнаяТочка = ПараметрыСеанса.оуп_ТекущаяКонтрольнаяТочка;
	если КонтрольнаяТочка.Пустая() Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	Объект.Склад = КонтрольнаяТочка.Склад;

	ЗаполнитьСписокВыбораОрганизаций();
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары)
	);

КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию (Поставщик);
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ПоставщикПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ложь;
	
	ЗначениеОтбора = ПараметрыВыбораДоговораКонтрагента();
	
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора",ПараметрыВыбора,,,,, 
		новый ОписаниеОповещения("ЗавершенияВыбораДоговора", ЭтотОбъект)
	);
	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	если ТекущаяСтрока.СтатусУказанияСерий >0 Тогда 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗначениеОтбора = ПараметрыВыбораНоменклатуры();
	ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", 
		ПараметрыВыбора, 
		ЭтаФорма,,,, 
		Новый ОписаниеОповещения("ЗавершениеВыбораНоменклатуры", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	)


КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
		текданные = Элементы.Товары.ТекущиеДанные;
	если текданные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	текданные.КоличествоУпаковок = текданные.количество;
	
	если текданные.Сумма > 0 Тогда 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.Товары.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	текДанные = Элементы.Товары.ТекущиеДанные;
	если текДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	если  текДанные.количество < 0 тогда		
		Возврат;
	КонецЕсли;
	
	РасцитатьЦену(текДанные);
КонецПроцедуры  
#Область ФоновоеПроведениеПоступления
&НаКлиенте
Процедура СформироватьДокумент(Команда)
	текЕстьОшибка = ложь;
	
	для Каждого строка из Объект.Товары Цикл 
		если строка.СтатусУказанияСерий > 0 и не ЗначениеЗаполнено(строка.Серия) Тогда 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не указана серия для товара  " + строка(объект.Товары.Получить(строка.ПолучитьИдентификатор()).Номенклатура);
			Сообщение.Поле = "Объект.Товары["+ строка.ПолучитьИдентификатор()+ "].Номенклатура";
	
			Сообщение.Сообщить();
	        текЕстьОшибка = Истина;
		КонецЕсли;
		
	КонецЦикла;

	
	если текЕстьОшибка Тогда 
		Возврат;
	КонецЕсли;
	
	если ПроверитьЗаполнение() Тогда 
		ПоказатьВопрос(новый ОписаниеОповещения("ПодтверждениеПриемкиПродукции", ЭтотОбъект), 
			"Провести документ поступление на склад на сумму " +Объект.Товары.Итог("Сумма") +"р. ?",
			РежимДиалогаВопрос.ДаНет,,, 
			"Завершение работы с документом"
		);
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПриемкиПродукции(Ответ, ДопПараметры) Экспорт 
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли; 
	
	ОчиститьСообщения();

	 ДлительнаяОперация = ФоновоеПроведениеДокументаПоступления();

	 
	 //2. Подключение обработчика завершения фонового задания. 
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания =Истина;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОкончаниеФоновогоЗаданияПриемки", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);


КонецПроцедуры // ОтветНаВопрос()        

&НаСервере
Функция ФоновоеПроведениеДокументаПоступления()

	ТекстСообщенияПользователю= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"), ТекущаяДатаСеанса(), "Начало проведения документа..");
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);
	НаименованиеЗадания = НСтр("ru = 'Выполнение проведение документа приобретения'");
	ВыполняемыйМетод = "оуп_ПриемПродукцииСервер.ПровестиПакетДокументовПоступления";
	ПараметрыПроцедуры = Новый Структура;
	
	ДанныеЗаполнения = оуп_ПриемПродукцииСервер.СтруктураДанныхПриобретение();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Объект, "Склад");
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ЭтотОбъект, "Организация,Договор, НомерВходящегоДокумента, ДатаВходящегоДокумента");
	ДанныеЗаполнения.Партнер = Поставщик; 
	ДанныеЗаполнения.ЦенаВключаетНДС = Истина;  
	ДанныеЗаполнения.РегистрироватьЦеныПоставщика = Истина;
	
	
	
	ПараметрыПроцедуры.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
	ПараметрыПроцедуры.Вставить("Товары", объект.Товары.Выгрузить());

	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	Возврат ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод,ПараметрыПроцедуры, ПараметрыВыполнения);


КонецФункции // ФоновоеПроведение()


&НаКлиенте
Процедура ОкончаниеФоновогоЗаданияПриемки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда  // отменено пользователем
		
		Возврат;
	КонецЕсли; 
	
	текОперацияУспешна = ВывестиРезультатЗадания(Результат);
	если текОперацияУспешна и ЭтаФорма.Открыта() Тогда 
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
	
	Если Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(,Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
функция ВывестиРезультатЗадания(Результат) 
	текОперацияУспешна = Истина;
	
	ТекстСообщения = "Задание Выполнено";
	Если Результат.Статус = "Выполнено" Тогда
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда 
		ТекстСообщения = Результат.ПодробноеПредставлениеОшибки;      
		текОперацияУспешна = Ложь;
	КонецЕсли;
	Если Результат.Сообщения <> Неопределено Тогда 
		Для каждого СообщениеПользователю Из Результат.Сообщения
			Цикл  
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли; 
	ТекстСообщенияПользователю= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2'"), ТекущаяДатаСеанса(), ТекстСообщения);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);  
	Возврат текОперацияУспешна;
КонецФункции
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции     

#Область ВыбьборСерий
&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст, ТекущиеДанные)Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма,,,, Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормыУказанияСерий", ПараметрыФормыУказанияСерий)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	

	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	ОткрытьПодборСерий();
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
    
    
    ЗначениеВозврата = Результат;
    
    Если ЗначениеВозврата <> Неопределено Тогда
        ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	Действия = Новый Структура;
	Действия.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ЭтотОбъект, Действия);
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", Объект.Склад, ПараметрыУказанияСерий));

	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, Действия);
	
	УпаковочныеЛистыСервер.ПеренумероватьСтроки(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(Форма, Действия)
	
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Действия.Вставить("ПересчитатьВесОбъем");
	Действия.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("Склад, ПараметрыУказанияСерий", Форма.Объект.Склад, Форма.ПараметрыУказанияСерий));
	
КонецФункции

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка =Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);

КонецПроцедуры
 #КонецОбласти

&НаСервере
Функция ПараметрыВыбораНоменклатуры()
Возврат Новый Структура ("ТипНоменклатуры, ПометкаУдаления", 
	Перечисления.ТипыНоменклатуры.Товар,
	Ложь
);
КонецФункции // ПараметрыВыбораНоменклатуры()

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизаций()

Список = Элементы.Организация.СписокВыбора;	
Список.ЗагрузитьЗначения(оуп_ПриемПродукцииСервер.СписокДоступныхОрганизацийКТ(КонтрольнаяТочка));

КонецПроцедуры // ЗаполнитьСписокВыбораОрганизаций()

&НаСервере
Функция ПараметрыВыбораДоговораКонтрагента()

	Возврат  Новый Структура("ХозяйственнаяОперация, Статус, ПометкаУдаления, Организация, Партнер, Контрагент", 
		перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
		перечисления.СтатусыДоговоровКонтрагентов.Действует,
		Ложь, 
		Организация,
		Поставщик, 
		Контрагент
		
	);

КонецФункции // ПараметрыВыбора()

&НаКлиенте
Процедура ЗавершенияВыбораДоговора(Значение, ДополнительныеПараметры) Экспорт 

	Если Значение = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	Договор = Значение;
	

КонецПроцедуры // ЗавершенияВыбораДоговора()

&НаКлиенте
Процедура ЗавершениеВыбораНоменклатуры(Номенклатура, ДопПараметры) Экспорт 
	если Номенклатура = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.Номенклатура = Номенклатура;

КонецПроцедуры // ЗавершениеВыбораНоменклатуры()

&НаКлиенте
Процедура РасцитатьЦену(текДанные)
	
	текДанные.Цена  = текДанные.Сумма / текДанные.количество;
	

КонецПроцедуры // РасцитатьЦену()

#КонецОбласти    

