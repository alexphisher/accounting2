#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	//TODO: Вставить содержимое обработчика
	Параметры.Свойство("ДатаСмены", Датасмены);
	Параметры.Свойство("Спецификация", Спецификация);
	КонтрольнаяТочка = ПараметрыСеанса.оуп_ТекущаяКонтрольнаяТочка;
	
	если 	не ЗначениеЗаполнено(ДатаСмены) или
			не ЗначениеЗаполнено(Спецификация) или
			не ЗначениеЗаполнено(КонтрольнаяТочка)	тогда
		Отказ = Истина;
		возврат;		
	КонецЕсли;
	
	Склад = КонтрольнаяТочка.Склад;
	
//	ЗаполнитьПараметрыСписков();
	ДобавитьКолонкиСкладов();
	ЗагрузитьДанныеВыпуска();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//&НаСервере
//Процедура ЗаполнитьПараметрыСписков()
//	МассивТаблиц = новый Массив;
//	МассивТаблиц.Добавить("Выпуск");
//	МассивТаблиц.Добавить("Материалы");
//	МассивТаблиц.Добавить("Произведено");
//	
//	для Каждого Таблица из МассивТаблиц Цикл
//		УстановитьПареметрыСписка(Таблица);
//	КонецЦикла;
//	
//КонецПроцедуры
//
//&НаСервере
//Процедура УстановитьПареметрыСписка(Имятаблицы)
//	ЭтотОбъект[Имятаблицы].Параметры.УстановитьЗначениеПараметра("Склад", Склад);
//	ЭтотОбъект[Имятаблицы].Параметры.УстановитьЗначениеПараметра("ДатаСмены", ДатаСмены);	
//КонецПроцедуры
//
////&НаСервере
//Функция ПолучитьТЗизДинамическогоСписка(ИмяТаблицы)
//
//	Схема = Элементы[ИмяТаблицы].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
//	Настройки = Элементы[ИмяТаблицы].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
//	
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
//	
//	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
//	
//	ТабЗначений = Новый ТаблицаЗначений;
//	
//	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
//	ПроцессорВывода.УстановитьОбъект(ТабЗначений);
//	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
//	
//	Возврат ТабЗначений;
//
//КонецФункции

&НаСервере
Процедура ДобавитьКолонкиСкладов()
	
	оуп_ФормированиеФорм.ДобавитьКолонкиСкладовТаблицы(
		ЭтотОбъект,
		КонтрольнаяТочка.Склад,
		КонтрольнаяТочка.СкладыПолучатели,
		"ВыходныеИзделия", 
		СоответствиеСкладов, 
		Элементы.ВыходныеИзделия
	);
	

КонецПроцедуры // ДобавитьКолонкиСкладов()

&НаСервере
Процедура ЗагрузитьДанныеВыпуска()
	запрос = новый запрос;
	Запрос.Текст = 	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Склад
	|ПОМЕСТИТЬ втСклады
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтрольнаяТочкаСкладыПолучатели.Склад
	|ИЗ
	|	Справочник.КонтрольнаяТочка.СкладыПолучатели КАК КонтрольнаяТочкаСкладыПолучатели
	|ГДЕ
	|	КонтрольнаяТочкаСкладыПолучатели.Ссылка = &КонтрольнаяТочка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	оуп_ДанныеВыпускаПродукцииОстатки.Спецификация,
	|	оуп_ДанныеВыпускаПродукцииОстатки.Номенклатура,
	|	оуп_ДанныеВыпускаПродукцииОстатки.КоличествоОстаток КАК Количество,
	|	оуп_ДанныеВыпускаПродукцииОстатки.СкладПолучатель КАК Склад
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	РегистрНакопления.оуп_ДанныеВыпускаПродукции.Остатки(, Склад = &Склад
	|	И Спецификация = &Спецификация
	|	И ДатаСмены = &ДатаСмены
	|	И СкладПолучатель В
	|		(ВЫБРАТЬ
	|			вт.склад
	|		ИЗ
	|			втСклады КАК вт)) КАК оуп_ДанныеВыпускаПродукцииОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура
	|ПОМЕСТИТЬ МассивТоваров
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Спецификация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втТовары.Номенклатура
	|ИЗ
	|	втТовары КАК втТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МассивТоваров.Номенклатура,
	|	ЕСТЬNULL(втТовары.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(втТовары.Количество, 0) КАК Количество
	|ИЗ
	|	МассивТоваров КАК МассивТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТовары КАК втТовары
	|		ПО МассивТоваров.Номенклатура = втТовары.Номенклатура";
	запрос.УстановитьПараметр("Склад", Склад);
	запрос.УстановитьПараметр("Спецификация", Спецификация);
	запрос.УстановитьПараметр("ДатаСмены", ДатаСмены);
	Запрос.УстановитьПараметр("КонтрольнаяТочка", КонтрольнаяТочка);
	
	
	РезультатЗапроса = запрос.Выполнить().Выгрузить();
	ИмяКолонкиКоличество = "Количество";
	СтрокаГруппировки = "Номенклатура";
	
	СтрокиТовары = РезультатЗапроса.Скопировать();
	СтрокиТовары.Свернуть(СтрокаГруппировки, ИмяКолонкиКоличество);
	ИмяКолонкиСклада = "Склад";

	
	для Каждого СтрокаТовар из СтрокиТовары Цикл 
		СтрокаВыходИзд = ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВыходИзд, СтрокаТовар, СтрокаГруппировки);
		ОтборСтроки = новый Структура(СтрокаГруппировки);
		ЗаполнитьЗначенияСвойств(ОтборСтроки, СтрокаТовар);
		СтрокаВыходИзд.количество =  СтрокаТовар.Количество;
		
		
		СтрокиПоСкладам = РезультатЗапроса.НайтиСтроки(ОтборСтроки);
		для Каждого СтрокаПоСкладу из СтрокиПоСкладам Цикл 
			если не ЗначениеЗаполнено(СтрокаПоСкладу[ИмяКолонкиСклада]) Тогда 
				// Пустые строки со складами пропускаем...
				Продолжить;
			КонецЕсли;
			
			ТекИмяКолонки = оуп_ФормированиеФорм.ИмяКолонкиСклада(СтрокаПоСкладу[ИмяКолонкиСклада], ЭтотОбъект);
			
			СтрокаВыходИзд[ТекИмяКолонки] = СтрокаПоСкладу[ИмяКолонкиКоличество];
						
		КонецЦикла;
 
		//ЗаполнитьИтогДляТекущегоСклада(СтрокаВыходИзд, ЭтотОбъект);

		
	КонецЦикла;
	

КонецПроцедуры

//&НаСервере
//Процедура ЗаполнитьИтогДляТекущегоСклада(СтрокаВыходныеИзделия, Форма)
//	ИмяКолонкиЭтогоСклада = оуп_ФормированиеФорм.ИмяКолонкиСклада(Склад ,Форма, Истина);
//	Объёмпередано = 0;
//	
//	для Каждого ИмяКолонкиПолучателя из КолонкиСкладовПолучателей(Форма) Цикл 
//		Объёмпередано = СтрокаВыходныеИзделия[ИмяКолонкиПолучателя] + Объёмпередано;
//	КонецЦикла;
//	
//	СтрокаВыходныеИзделия[ИмяКолонкиЭтогоСклада] = СтрокаВыходныеИзделия["Количество"] - Объёмпередано;
//КонецПроцедуры // ЗаполнитьИтогДляТекущегоСклада()

//&НаСервере
//Функция КолонкиСкладовПолучателей (Форма)
//	массивИменаКолонок = новый Массив;
//	
//	для Каждого Строка из Форма.КонтрольнаяТочка.СкладыПолучатели Цикл 
//		Отбор = Новый Структура("Склад", Строка.Склад);
//		//ЗаполнитьЗначенияСвойств(Отбор,Строка.КонтрольнаяТочка,"Склад");
//		СтрокиСоответствия = Форма.СоответствиеСкладов.НайтиСтроки(Отбор);
//		для Каждого СтрокаСоответствия из СтрокиСоответствия Цикл 
//			массивИменаКолонок.Добавить(СтрокаСоответствия.Имя);
//			Прервать;
//		КонецЦикла;
//		
//	КонецЦикла;
//	
//	Возврат массивИменаКолонок;
//КонецФункции // КолонкиСкладовПолучателей()
#КонецОбласти